#import "prelude.typ": *
#import "title_page.typ": *

#let title = ""
#let author = "Тюрин Иван Николаевич"

#show: thesis_format.with(
  title,
  author,
  title_page: title_page(
    about: [О подготовке введения в научно исследовательскую работу],
    theme: [Моделирование и анализ архитектур программных систем с помощью графов],
    student: [#author, группа M4120],
    university_manager: [Синица Александр Михайлович],
    date: datetime.today().display("[day].[month].[year]"),
  ),
)
= Введение

== Актуальность и научно-практическая значимость

Современные распределённые и корпоративные программные системы характеризуются высокой связностью компонентов и динамической структурой развертывания. Представление архитектуры в виде вычислимого помеченного графа (вершины -- сервисы/модули/методы, рёбра -- зависимости/вызовы/каналы) обеспечивает формализацию, пригодную для анализа. Это позволяет:

- оценивать надёжность и прогнозировать узкие места по графу зависимостей;
- разрабатывать автоматизированные инструменты для принятия архитектурных решений;
- использовать научные методы для программной инженерии.

Практические области применения: программная инженерия и разработка информационных, управляющих и телекоммуникационных системы.

*Цель исследования*: Разработать методику моделирования архитектуры программных систем в виде графов и набор алгоритмов их анализа.

Дополнительно возможно реализовать прототип инструмента для автоматизированной оценки качества архитектурных моделей и диагностики проблем.

*Задачи*: 
1. Выполнить обзор существующих графовых подходов к моделированию архитектуры и выявить ограничения для современных распределённых систем.  
2. Сформализовать метамодель архитектуры: типы узлов и рёбер, семантика атрибутов.
3. Выбрать архитектуру для анализа и построить для неё модель.
4. Оценить возможность выполнения анализа такой модели.
5. Разработать алгоритмы анализа.
6. Провести валидацию: сравнение аналитических выводов с экспертной оценкой.

*Структура работы*:

1. Введение.
2. Обзор литературы и анализ разработанных решений.
3. Метамодель и формализация.
4. Построение модели архитектуры.
5. Разработка алгоритма для анализа модели.
6. Эксперименты с полученной моделью и сравнение оценок.
7. Обсуждение полученных результатов.
8. Заключение и перспективы.

*Литературные источники*:

1. Petriu, D. C. & Wang, X. (2000). *Deriving Software Performance Models from Architectural Patterns by Graph Transformations.*  
   -- Архитектура представляется как помеченный граф; правила графовых преобразований переводят структурную модель в модель производительности (LQN). В настоящей работе используем идею трансформации архитектурной граф‑модели в количественные модели для оценки производительности @PetriuWang2000_graph_transformations.

2. Hirsch, G., Inverardi, P., Montanari, U. et al. (1999). *Modeling Software Architectures and Styles with Graph Grammars and Constraint Solving.*  
   -- Описаны графовые грамматики для генерации допустимых архитектурных конфигураций и интеграция с решателями ограничений. Базовая формализация для задания правил допустимости в метамодели и верификации стилей @HirschInverardi1999_graph_grammars.

3. Bruni, R., Bucchiarone, A., Gnesi, S. et al. (2008). *Graph‑Based Design and Analysis of Dynamic Software Architectures.*  
   -- Подход к моделированию динамики архитектуры (появление/удаление компонентов, изменения связей) через графовые трансформации; релевантно для микросервисов и адаптивных систем @Bruni2008_graph_dynamic_arch.

4. Petnga, L. et al. (2019). *Graph‑based Assessment and Analysis of System Architecture Models.*  
   -- Преобразование SysML/ArchiMate в labeled property graphs и набор проверок (согласованность, полнота) @Petnga2019_graph_based_assessment.

5. "Application of Directed Hyper‑Graphs for Analysis of Models of Information Systems" (MDPI, 2021).  
   -- Обоснование использования гиперграфов для случаев множественных отношений (одна транзакция связывает множество сущностей). Рассматривается как расширение метамодели там, где бинарные ребра недостаточны @MDPI_Hypergraphs2021.

6. Романова В.Ю. “Визуализация и сравнение архитектур программной системы”
   -- В статье рассматривается способ визуализации для сравнения архитектур программных систем, что может быть полезно для выявления особенностей различных архитектур @romanov2016_visualization_comparison_architecture.

= Заключение

Предложенная работа направлена на создание практико‑ориентированного и формально обоснованного подхода к моделированию архитектуры ПО через графовые модели. В представленных литературных источниках рассматриваются схожие проблемы, что даёт понять осмысленносьт выбранной цели.

#pagebreak()
#bibliography("bibliography.bib")